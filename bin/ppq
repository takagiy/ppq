#!/bin/sh
ppq_install()
{
#!/bin/sh

dest=~/.ppq

while [ $# -ne 0 ]
do
  case "$1" in
    -d | --dest) shift;dest="$1";;
    *) echo "error: Invalid argument '$1'" 1>&2;exit 1;;
  esac
  shift
done

ppq_build --release --no-test && DESTDIR="$dest" cmake --install build
}
ppq_run()
{
#!/bin/sh

config="$(ppq_parse < package.ppq)"
name="$(echo "$config" | grep '^set=#package#name=' | cut -d'=' -f3)"
bin="$(echo "$config" | grep '^set=#package#bin=' | cut -d'=' -f3)"

ppq_build --target "${name}-bin" && build/"$bin"
}
ppq_parse()
{
#!/bin/sh

awk 'BEGIN {
  FS=" *= *"
}

/^ *$/ {
  next;
}

/^ *#.*$/ {
  next;
}

NF>1 {
  match($1, /^ */);
  $1=substr($1, RLENGTH+1);
  print "set="names[depth]"#"$1"="$2;
  next;
}

NF<=1 && match($0,/\[.*\]/) {
  name=substr($0, RSTART+1, RLENGTH-2);
  match($0, /^ */);
  depth=RLENGTH;
  names[depth]=names[depth-2]"#"name;
  print "append="names[depth-2]"="names[depth]
  next;
}

{
  print "Syntax error at line"NR;
  print "\""$0"\""
  exit 1;
}'
}
ppq_test()
{
#!/bin/sh

ppq_build --target test
}
ppq_deps_list()
{
#!/bin/sh

ppq_parse < package.ppq | grep '^append=#dependencies=' | cut -d'=' -f3 | sed 's/^#dependencies#//'
}
ppq_help()
{
#!/bin/sh
:
}
ppq_init()
{
#!/bin/sh

force=

while :
do
  case "$1" in
    -f | --force) force=1;;
    -*) "error: Unkown option '$1'";;
    *) break;;
  esac
  shift
done

{
  [ -z "$force" ] && [ -f CMakeLists.txt ] &&\
    echo "error: File 'CMakeLists.txt' already exists" && exit 1
} 1>&2

projname=${1:-$(printf "project name:\n-> " 1>&2; read -r tmp; echo "$tmp")}

echo "Creating project '$projname'..." 1>&2

{
  echo "[meta]"
  echo "config_version = 1"
  echo ""
  echo "[package]"
  echo "name = $projname"
  echo "version = 0.1.0"
  echo "bin = $projname"
  echo "lib = $projname"
  echo "test_framework = cassert"
} > package.ppq

mkdir -p test
mkdir -p src/"$projname"
mkdir -p include/"$projname"

{
  echo "#include <$projname/lib.hpp>"
  echo ""
  echo "int main() {"
  echo "  $projname::hello();"
  echo "}"
} > src/main.cpp

{
  echo "#ifndef $(echo "$projname" | tr '[:lower:]' '[:upper:]')_LIB"
  echo "#define $(echo "$projname" | tr '[:lower:]' '[:upper:]')_LIB"
  echo ""
  echo "namespace $projname {"
  echo "auto hello() -> void;"
  echo "}"
  echo "#endif"
} > include/"$projname"/lib.hpp

{
  echo "#include <$projname/lib.hpp>"
  echo "#include <cstdio>"
  echo ""
  echo "namespace $projname {"
  echo "auto hello() -> void {"
  echo "  std::puts(\"Hello, $projname.\");"
  echo "}"
  echo "}"
} > src/"$projname"/lib.cpp

{
  echo "#include <cassert>"
  echo ""
  echo "int main() {"
  echo "  static_assert(1 + 1 == 2);"
  echo "  assert(1 + 1 == 2);"
  echo "}"
} > test/test.cpp

ppq_lists > CMakeLists.txt
ppq_test_lists > test/CMakeLists.txt

mkdir -p build && ppq_build --config-only
}
ppq_deps_list_exports()
{
#!/bin/sh

ppq_parse < package.ppq | grep '^set=#dependencies#[^#]*#export=' | cut -d'=' -f3
}
ppq_lists()
{
#!/bin/sh

config="$(ppq_parse package < package.ppq)"
name="$(echo "$config" | grep '^set=#package#name=' | cut -d'=' -f3)"
version="$(echo "$config" | grep '^set=#package#version=' | cut -d'=' -f3)"
lib="$(echo "$config" | grep '^set=#package#lib=' | cut -d'=' -f3)"
bin="$(echo "$config" | grep '^set=#package#bin=' | cut -d'=' -f3)"

echo "cmake_minimum_required(VERSION 3.1)"
echo ""
echo "project($name VERSION $version LANGUAGES CXX)"
echo ""
ppq_deps_list | sed 's/^/find_package(/;s/$/ CONFIG REQUIRED)/'
echo ""
echo "add_library($lib)"
echo "target_include_directories($lib PUBLIC"
echo "    \$<BUILD_INTERFACE:\${CMAKE_CURRENT_SOURCE_DIR}/include>"
echo "    \$<INSTALL_INTERFACE:include>)"
echo "target_sources($lib PRIVATE"
find src/"$name" -type f -name '*.cpp' -exec echo "    {}" ';'
echo "    )"
echo "target_link_libraries($lib PRIVATE"
ppq_deps_list_exports | sed 's/^/    /'
echo "    )"
echo ""
echo "add_executable(${name}-bin src/main.cpp)"
echo "set_target_properties(${name}-bin"
echo "    PROPERTIES OUTPUT_NAME $bin)"
echo "target_link_libraries(${name}-bin"
echo "    $lib"
ppq_deps_list_exports | sed 's/^/    /'
echo "    )"
echo ""
echo "install(TARGETS $lib ${name}-bin"
echo "    EXPORT ${name}-config"
echo "    ARCHIVE DESTINATION lib"
echo "    LIBRARY DESTINATION lib"
echo "    RUNTIME DESTINATION bin)"
echo ""
echo "install(EXPORT ${name}-config"
echo "    NAMESPACE ${name}"
echo "    DESTINATION lib/cmake/$name)"
echo ""
echo "include(CMakePackageConfigHelpers)"
echo ""
echo "write_basic_package_version_file("
echo "    \${CMAKE_CURRENT_BINARY_DIR}/${name}-config-version.cmake"
echo "    COMPATIBILITY SameMajorVersion)"
echo ""
echo "install(FILES \${CMAKE_CURRENT_BINARY_DIR}/${name}-config-version.cmake"
echo "    DESTINATION lib/cmake/$name)"
echo "install(DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR}/include/"
echo "    DESTINATION include)"
echo ""
echo "if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)"
echo "    include(CTest)"
echo "    if(BUILD_TESTING)"
echo "        add_subdirectory(test)"
echo "    endif()"
echo "endif()"
}
ppq_build()
{
#!/bin/sh

target=all
build_type=Release
build_shared_libs=OFF
build_testing=ON
skip_config=
config_only=

while [ $# -ne 0 ]
do
  case "$1" in
    -t | --target) shift;target="$1";;
    --release) build_type=Release;;
    --shared-libs) build_shared_libs=ON;;
    --no-test) build_testing=OFF;;
    --skip-config) skip_config=yes;;
    --config-only) config_only=yes;;
    *) echo "error: Invalid argument '$1'" 1>&2;exit 1;;
  esac
  shift
done

if [ -e package.ppq ]
then
  ppq_lists > CMakeLists.txt
  ppq_test_lists > test/CMakeLists.txt
fi

mkdir -p build && \
  if [ ! -e build/CMakeCache.txt ] || [ -z "$skip_config" ]
  then
    cmake -S . -B build \
        -DCMAKE_BUILD_TYPE="$build_type" \
        -DBUILD_SHARED_LIBS="$build_shared_libs" \
        -DBUILD_TESTING="$build_testing"
  fi && \
  [ -z "$config_only" ] && cmake --build build --target "$target"
}
ppq_deps_install()
{
#!/bin/sh

mkdir -p cplusplus_modules

ppq_path="$(cd "$(dirname -- "$(command -v -- "$0")")" && pwd -P)/$(basename -- "$(command -v -- "$0")")"

ppq_parse < package.ppq | awk -v ppq="$ppq_path" '
BEGIN {
  FS="="
  ndep=0
}

$1=="set" && $2 ~ /#dependencies#.*/ {
  field[$2]=$3;
  next
}

$1=="append" && $2=="#dependencies" {
  deps[ndep++]=$3;
  next
}

END {
  for(dep in deps) {
    d = deps[dep];
    name = d;
    sub(/^#dependencies#/, "", name);
    user = field[d "#location#ref"];
    sub(/\/.+$/, "", user);
    cmd = "mkdir -p cplusplus_modules/" user;
    print cmd;
    system(cmd);
    cmd = "git -C cplusplus_modules/" user " clone https://github.com/" field[d "#location#ref"] ".git";
    print cmd;
    system(cmd);
    cmd = "sh -c \"cd cplusplus_modules/" field[d "#location#ref"] " && " ppq " install\""
    print cmd;
    system(cmd);
  }
}
'
}
ppq_test_lists()
{
#!/bin/sh

name="$(ppq_parse < package.ppq | grep '^set=#package#name=' | cut -d'=' -f3)"

echo "set(${name}_unit_tests_count 0)"
echo ""
echo "function(add_unit_test source_file)"
echo "  math(EXPR tmp \"\${${name}_unit_tests_count} + 1\")"
echo "  set(${name}_unit_tests_count \${tmp} PARENT_SCOPE)"
echo "  set(test_binary \"${name}_unit_test\${${name}_unit_tests_count}\")"
echo ""
echo "  add_executable(\${test_binary} EXCLUDE_FROM_ALL \"\${source_file}\")"
echo "  add_test([build]\${source_file}"
echo "    \${CMAKE_COMMAND} --build \${CMAKE_BINARY_DIR} --target \${test_binary})"
echo ""
echo "  add_test(NAME \${source_file} COMMAND \${test_binary})"
echo "  set_tests_properties(\${source_file} PROPERTIES DEPENDS [build]\${test_binary})"
echo "endfunction()"
echo ""
for src in $(find test -type f -name '*.cpp' | sed -e 's/^test\///')
do
  echo "add_unit_test($src)"
done
}
#!/bin/sh

subcmd=${1:-help}
[ $# -ne 0 ] && shift
ppq_"$subcmd" "$@"
