#!/bin/sh

force=

while :
do
  case "$1" in
    -f | --force) force=1;;
    -*) "error: Unkown option '$1'";;
    *) break;;
  esac
  shift
done

{
  [ -z "$force" ] && [ -f CMakeLists.txt ] &&\
    echo "error: File 'CMakeLists.txt' already exists" && exit 1
} 1>&2

projname=${1:-$(printf "project name:\n-> " 1>&2; read -r tmp; echo "$tmp")}

echo "Creating project '$projname'..." 1>&2

{
  echo "[meta]"
  echo "config_version = 1"
  echo ""
  echo "[package]"
  echo "name = $projname"
  echo "version = 0.1.0"
  echo "bin = $projname"
  echo "lib = $projname"
  echo "test_framework = cassert"
} > package.ppq

mkdir -p test
mkdir -p src/"$projname"
mkdir -p include/"$projname"

{
  echo "#include <$projname/lib.hpp>"
  echo ""
  echo "int main() {"
  echo "  $projname::hello();"
  echo "}"
} > src/main.cpp

{
  echo "#ifndef $(echo "$projname" | tr '[:lower:]' '[:upper:]')_LIB"
  echo "#define $(echo "$projname" | tr '[:lower:]' '[:upper:]')_LIB"
  echo ""
  echo "namespace $projname {"
  echo "auto hello() -> void;"
  echo "}"
  echo "#endif"
} > include/"$projname"/lib.hpp

{
  echo "#include <$projname/lib.hpp>"
  echo "#include <cstdio>"
  echo ""
  echo "namespace $projname {"
  echo "auto hello() -> void {"
  echo "  std::puts(\"Hello, $projname.\");"
  echo "}"
  echo "}"
} > src/"$projname"/lib.cpp

{
  echo "#include <cassert>"
  echo ""
  echo "int main() {"
  echo "  static_assert(1 + 1 == 2);"
  echo "  assert(1 + 1 == 2);"
  echo "}"
} > test/test.cpp

ppq_lists > CMakeLists.txt
ppq_test_lists > test/CMakeLists.txt

mkdir -p build && ppq_build --config-only
